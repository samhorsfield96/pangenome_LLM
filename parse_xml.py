import xml.etree.ElementTree as ET

def get_options():
    """
    Parse command-line arguments.

    This function parses the command-line arguments provided by the user and returns
    a Namespace object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Parses XML files generated by NCBI.")
    parser.add_argument("--infile", type=str, required=True, help="NCBI XML file generated by downloading FULL XML for a set of Biosamples.")
    parser.add_argument("--outfile", type=str, default="output.tsv", help="Output filename. Default = 'output.tsv'")

    args = parser.parse_args()

    return args

def parse_ncbi_xml(xml_string):
    tree = ET.parse(xml_string)
    root = tree.getroot()
    results = []
    
    for biosample in root.findall(".//BioSample"):
        # Extract Title
        title = biosample.find(".//Description/Title")
        title_text = title.text if title is not None else "N/A"
        
        # Extract sample accession
        sample_accession = biosample.get("accession", "N/A")
        
        # Extract collection date
        collection_date = biosample.find(".//Attributes/Attribute[@attribute_name='collection date']")
        collection_date_text = collection_date.text if collection_date is not None else "N/A"
        
        # Extract country
        country = biosample.find(".//Attributes/Attribute[@attribute_name='country']")
        country_text = country.text if country is not None else "N/A"
        
        # Extract last updated date
        last_updated = biosample.get("last_update", "N/A")
        
        # Extract scientific name
        scientific_name = biosample.find(".//Attributes/Attribute[@attribute_name='scientific_name']")
        scientific_name_text = scientific_name.text if scientific_name is not None else "N/A"
        
        # Extract taxonomic classification
        taxonomic_classification = biosample.find(".//Organism")
        taxonomy_text = taxonomic_classification.get("taxonomy_name", "N/A") if taxonomic_classification is not None else "N/A"
        
        # Extract SRA field
        sra = biosample.find(".//Ids/Id[@db='SRA']")
        sra_text = sra.text if sra is not None else "N/A"
        
        results.append({
            "sample_accession": title_text,
            "sample_accession_NCBI": sample_accession,
            "collection_date": collection_date_text,
            "country": country_text,
            "last_updated": last_updated,
            "scientific_name": scientific_name_text,
            "taxonomic_classification": taxonomy_text,
            "SRA": sra_text
        })
    
    return results

def main():
    options = get_options()

    # Example usage with provided XML
    results = parse_ncbi_xml(options.infile)
    outfile = options.outfile

    with open(outfile, "w") as o:
        o.write("sample_accession\tcountry\tcollection_date\tlast_updated\tscientific_name\ttaxonomic_classification\n")
        for result in results:
            o.write(f"{result['sample_accession']}\t{result['country']}\t{result['collection_date']}\t{result['last_updated']}\t{result['scientific_name']}\t{result['taxonomic_classification']}\n")
            
if __name__ == "__main__":
    main()