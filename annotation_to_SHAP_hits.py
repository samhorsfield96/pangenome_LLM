import argparse
import pandas as pd
import json

def parse_args():
    """
    Parse command-line arguments.

    This function parses the command-line arguments provided by the user and returns
    a Namespace object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Match associated tokens with a list of annotations")
    parser.add_argument("--SHAP_hits", type=str, required=True, help="Path to SHAP hits generated by plot_SHAP.py.")
    parser.add_argument("--annotations", type=str, required=True, help="Path to .tsv file generated by annotate_tokens.py")
    parser.add_argument("--sort", default=False, action="store_true", help="Sort by SHAP value in descending order")
    parser.add_argument("--outpref", default="annotated_tokens", help="Output prefix")

    args = parser.parse_args()

    return args

def main():

    args = parse_args()
    SHAP_hits = args.SHAP_hits
    annotations = args.annotations
    outpref = args.outpref
    sort_values = args.sort

    SHAP_df = pd.read_csv(SHAP_hits, sep=',', header=0)
    SHAP_df['abs_tokens'] = [abs(x) if x != "_" else "_" for x in SHAP_df['Token']]

    annotations_df = pd.read_csv(annotations, sep='\t', header=0)

    merged_df = SHAP_df.merge(annotations_df, left_on='abs_tokens', right_on="Token")

    merged_df.drop(["Token_y", "abs_tokens"], inplace=True, axis=1)
    merged_df.rename(columns={"Token_x": "Token"}, inplace=True)

    if sort_values:
        merged_df['abs_SHAP'] = abs(merged_df['SHAP'])
        merged_df.sort_values("abs_SHAP", axis=0, ascending=False, inplace=True)
        merged_df.drop(["abs_SHAP"], inplace=True, axis=1)

    merged_df.to_csv(outpref + '.tsv', sep="\t", index=False) 
            
if __name__ == "__main__":
    main()