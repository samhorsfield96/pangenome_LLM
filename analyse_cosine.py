import argparse
import pandas as pd
import pickle
import numpy as np

def parse_args():
    """
    Parse command-line arguments.

    This function parses the command-line arguments provided by the user and returns
    a Namespace object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Analyse cosine distances")
    parser.add_argument("--infile", type=str, required=True, help="Path to cosine output file generated by compute_cosine.py.")
    parser.add_argument("--annotations", type=str, required=True, help="Path to .tsv file generated by annotate_tokens.py")
    parser.add_argument("--outpref", default="cosine_distances", help="Output prefix")
    parser.add_argument("--min-sim", type=float, default=0.0, help="Minimum cosine similarity to compare. Default = 0.0")

    args = parser.parse_args()

    return args

def main():

    args = parse_args()
    infile = args.infile
    annotations = args.annotations
    outpref = args.outpref
    min_sim = args.min_sim

    print("Reading csv...")
    df = pd.read_csv(infile, index_col=0, dtype="string")
    
    # Extract the upper triangle of the matrix, including the diagonal
    tuples_list = [
        (row_idx, col_idx, float(df.loc[row_idx, col_idx]))
        for i, row_idx in enumerate(df.index)
        for j, col_idx in enumerate(df.columns)
        if j > i and float(df.loc[row_idx, col_idx]) >= min_sim # This filters for the upper triangle and minimum distance
    ]

    del df

    #print(tuples_list)

    print("Sorting df...")
    # Sort the list of tuples based on the values in descending order
    sorted_tuples = sorted(tuples_list, key=lambda x: x[2], reverse=True)

    # Display the sorted list
    #print(sorted_tuples)

    with open("/nfs/research/jlees/shorsfield/LLM/cosine_distances/cosine_tmp.pkl", 'wb') as handle:
        pickle.dump(sorted_tuples, handle, protocol=pickle.HIGHEST_PROTOCOL)

    # read in cluster file
    with open("/nfs/research/jlees/shorsfield/LLM/cosine_distances/cosine_tmp.pkl", 'rb') as handle:
        sorted_tuples = pickle.load(handle)

    print("Reading annotations...")
    # read in annotations
    annotation_dict = {}
    with open(annotations, "r") as f:
        header = f.readline().rstrip().split("\t")
        for line in f:
            split_line = line.rstrip().split("\t")
            token = split_line[1]
            annotation_dict[token] = split_line

    print("Annotating data...")
    with open(outpref + ".tsv", "w") as o:
        header1 = "1\t".join(header)
        header2 = "2\t".join(header)

        o.write("Token1\tToken2\t" + header1 + "1\t" + header2 + "2\n")
        for token1, token2, val in sorted_tuples:
            # try to get annotations for integer tokens only
            try:
                token1_int = str(abs(int(token1)))
                token1_annotation = "\t".join(annotation_dict[token1_int])
            except:
                token1_annotation = [""] * len(header1)
            
            try:
                token2_int = str(abs(int(token2)))
                token2_annotation = "\t".join(annotation_dict[token2_int])
            except:
                token2_annotation = [""] * len(header2)

            o.write(token1 + "\t" + token2 + "\t" + str(val) + "\t" + token1_annotation + "\t" + token2_annotation + "\n")


    
if __name__ == "__main__":
    main()