import argparse
import pandas as pd
import pickle

def parse_args():
    """
    Parse command-line arguments.

    This function parses the command-line arguments provided by the user and returns
    a Namespace object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Analyse cosine distances")
    parser.add_argument("--infile", type=str, required=True, help="Path to cosine output file generated by compute_cosine.py.")
    parser.add_argument("--annotations", type=str, required=True, help="Path to .tsv file generated by annotate_tokens.py")
    parser.add_argument("--outpref", default="plot", help="Output prefix")

    args = parser.parse_args()

    return args

def main():

    args = parse_args()
    infile = args.infile
    annotations = args.annotations
    outpref = args.outpref

    df = pd.read_csv(infile, index_col=0, dtype="string")
    index_names = df.columns.tolist()

    # Extract the upper triangle of the matrix, including the diagonal
    tuples_list = [
        (row_idx, col_idx, float(df.loc[row_idx, col_idx]))
        for i, row_idx in enumerate(df.index)
        for j, col_idx in enumerate(df.columns)
        if j > i  # This filters for the upper triangle
    ]

    del df

    print(tuples_list)

    # Sort the list of tuples based on the values in descending order
    sorted_tuples = sorted(tuples_list, key=lambda x: x[2], reverse=True)

    # Display the sorted list
    print(sorted_tuples)

    with open("/nfs/research/jlees/shorsfield/LLM/cosine_distances/cosine_tmp.pkl", 'wb') as handle:
        pickle.dump(sorted_tuples, handle, protocol=pickle.HIGHEST_PROTOCOL)

    # read in cluster file
    with open("/nfs/research/jlees/shorsfield/LLM/cosine_distances/cosine_tmp.pkl", 'rb') as handle:
        sorted_tuples = pickle.load(handle)

    # read in annotations
    annotation_dict = {}
    with open(annotations, "r") as f:
        header = f.readline.rstrip().split("\t")
        for line in f:
            split_line = line.rstrip().split("\t")
            token = split_line[1]
            annotation_dict[int(token)] = split_line

    with open(outpref + ".tsv", "w") as o:
        header1 = "1\t".join(header)
        header2 = "2\t".join(header)

        o.write("Token1\tToken2\t" + header1 + "\t" + header2 + "\n")
        for token1, token2, val in sorted_tuples:
            token1_annotation = "\t".join(annotation_dict[abs(int(token1))])
            token2_annotation = "\t".join(annotation_dict[abs(int(token2))])

            o.write(token1 + "\t" + token2 + "\t" + str(val) + "\t" + token1_annotation + "\t" + token2_annotation + "\n")


    
if __name__ == "__main__":
    main()