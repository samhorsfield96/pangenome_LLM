import argparse
import pandas as pd
import json

def parse_args():
    """
    Parse command-line arguments.

    This function parses the command-line arguments provided by the user and returns
    a Namespace object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(description="Match associated tokens with a list of annotations")
    parser.add_argument("--tokens", type=str, required=True, help="Path to tokenizer json.")
    parser.add_argument("--annotations", type=str, required=True, help="Path to .tsv file generated by annotate_tokens.py")
    parser.add_argument("--outpref", default="annotated_tokens", help="Output prefix")

    args = parser.parse_args()

    return args

def main():

    args = parse_args()
    tokens = args.tokens
    annotations = args.annotations
    outpref = args.outpref

    token_dict = None
    with open(tokens) as f:
        token_dict = json.load(f)["model"]["vocab"]

    df = pd.read_csv(annotations, sep='\t', header=0)
    tokens_annotated = df['Token'].values.tolist()

    #print(token_dict.keys())
    #print(tokens_annotated)
    token_indices = []
    for index, token in enumerate(tokens_annotated):
        str_token = str(token)
        #print(str_token)
        if str_token in token_dict:
            token_indices.append(index)
        elif ("-" + str_token) in token_dict:
            token_indices.append(index)

    #print(token_indices)
    output_df = df[df.index.isin(token_indices)]

    output_df.to_csv(outpref + '.tsv', sep="\t", index=False) 
            
if __name__ == "__main__":
    main()